import com.github.sherter.googlejavaformatgradleplugin.GoogleJavaFormat
import org.jazzcommunity.development.BackupTask
import org.jazzcommunity.development.BootStrapTask
import org.jazzcommunity.development.RunTask
import org.jazzcommunity.development.SetupTask
import org.jazzcommunity.development.InfoTask
import org.jazzcommunity.development.library.DetectOperatingSystem
import org.jazzcommunity.development.library.RuntimeDetector
import org.jazzcommunity.development.library.config.ConfigReader

plugins {
    id 'java-gradle-plugin'
    id 'com.github.sherter.google-java-format' version '0.7.1'
}

repositories {
    jcenter()
    mavenCentral()
}

task format(type: GoogleJavaFormat) {
    group = "jde development"
    description = "Format jde source code according to the google code style."
}

googleJavaFormat {
    group = "jde development"
    description = "Source folders to include in formatting."
    include 'buildSrc/**'
}

task bootstrap(type: BootStrapTask) {
    group = "Jazz Development Environment"
    description = "Create folders for user environment. Generally only needs to be run once."
}

task info(type: InfoTask) {
    group = "Jazz Development Environment"
    description = "Print information of the currently available configuration."
}

task backup(type: BackupTask) {
    group = "Jazz Development Environment"
    description = "Backup user files. Options: [--mode=slim|user|full], default=slim"
    // default mode used when no command line argument is supplied, eg no '--mode=full'
    mode = "slim"
}

task setup(type: SetupTask) {
    group = "Jazz Development Environment"
    description = "Setup a new runtime based on an RTC sdk. Options: [--sdk=VERSION], default=latest"
    // will default to setting up the latest sdk version
    sdk = ""
}

allprojects {
    afterEvaluate { project ->
        def runtime = RuntimeDetector.get(project)
        if (runtime.isPresent()) {
            project.task('run', type: RunTask) {
                group = "Jazz Development Environment"
                description = "Run a jetty server for debugging. Options: [-Pruntime=VERSION], default=latest"
                workingDir './jde/runtime/' + runtime.get()
                // Somehow, the native OperatingSystem interface doesn't work properly yet
                // It's an incubating feature, so I guess we'll just have to wait.
                if (DetectOperatingSystem.windows) {
                    commandLine 'cmd', '/K', 'start', 'powershell', './run_jetty.ps1'
                }

                if (DetectOperatingSystem.linux) {
                    def line = ConfigReader.terminalEmulator()
                    commandLine line
                }
            }
        }

    }
}