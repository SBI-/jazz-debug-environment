apply plugin: 'java'

import org.gradle.internal.os.OperatingSystem;

task detect {
    doLast {
        println("Linux: " + OperatingSystem.current().isLinux())
        println("Windows: " + OperatingSystem.current().isWindows())
    }
}

task cleanup(type: Exec) {
    group "Jetty"
    description "Delete generated and runtime files"
    if (OperatingSystem.current().isWindows()) {
        workingDir './'
        commandLine 'powershell.exe', './scripts/clean.ps1'
    }

    if (OperatingSystem.current().isLinux()) {
        workingDir './'
        commandLine './scripts/clean.sh'
    }
}

task generate(type: Exec) {
    group "Jetty"
    description "Create jazz and equinox configuration files"
    if (OperatingSystem.current().isWindows()) {
        workingDir 'conf/jetty'
        commandLine 'powershell.exe', '../../scripts/generate_jetty_config.ps1'
    }

    if (OperatingSystem.current().isLinux()) {
        workingDir './conf/jetty'
        commandLine '../../scripts/generate_jetty_config.sh'
        ignoreExitValue true
    }
}

// Behaviour for run will differ between windows and linux. For windows, launching a new shell is probably the way to
// go with how users would expect this script to be run.
// For linux however, I would like to avoid forking the process and instead run jetty in the same window, maybe defered
// after gradle has finished. However, forking doesn't really seem to work properly from within gradle, so I still
// have to figure out some other way to do this. Maybe just go back to running run_jetty from the command line or
// something like that.
task run(type: Exec) {
    group "Jetty"
    description "Start jazz server"
    if (OperatingSystem.current().isWindows()) {
        workingDir './'
        commandLine 'cmd', '/K', 'start', 'powershell','./scripts/run_jetty.ps1'
    }

    // this is the simple, non-unix and non-portable way of dealing with running jetty in a separate process
    // to keep consistent with the "new terminal window" solution:
    // https://askubuntu.com/questions/476641/how-can-i-get-the-name-of-the-current-terminal-from-command-line
    if (OperatingSystem.current().isLinux()) {
        workingDir './'
        commandLine 'gnome-terminal', '-x', './scripts/run_jetty.sh'
    }
}

task db {
    group "Jetty"
    description "Setup a clean database for the current sdk"
    
    doLast {
        if (OperatingSystem.current().isWindows()) {

        }

        if (OperatingSystem.current().isLinux()) {
            exec {
                workingDir './'
                commandLine 'unzip', '-qq', 'db_presets/603_db.zip', '-d', 'db'
                ignoreExitValue true
            }
        }
    }
}

// remember: https://stackoverflow.com/a/19256949/1969804 for dynamic lookup and stuff.
task unzip {
    group "Jetty"
    description "Unzip sdk and server files into the correct folders"

    doLast {

        if (OperatingSystem.current().isWindows()) {
            exec {
                workingDir './sdk'
                commandLine 'powershell', '7z.exe', 'x', 'RTC-SDK-Server-6.0.3.zip'
            }

            exec {
                workingDir './jre'
                commandLine 'powershell', '7z.exe', 'x', 'JTS-CCM-keys-Win64_6.0.3.zip', 'server\\jre', '-r', ';',
                        'mv server\\jre\\* .', ';', 'rm -r server'
            }
        }

        if (OperatingSystem.current().isLinux()) {
            exec {
                workingDir './sdk'
                commandLine 'unzip', '-q', 'RTC-SDK-Server-6.0.3.zip'
                ignoreExitValue true
            }

            exec {
                workingDir './jre'
                commandLine 'unzip', '-q', 'JTS-CCM-keys-Linux64_6.0.3.zip', 'server/jre/*'
                ignoreExitValue true
            }

            exec {
                workingDir './jre'
                commandLine 'sh', '-c', 'cp -r server/jre/* .'
                ignoreExitValue true
            }

            exec {
                workingDir './jre'
                commandLine 'rm', '-r', 'server'
                ignoreExitValue true
            }
        }
    }
}

task kill {
    group "Jetty"
    description "Remove database, jre and sdk files. This will more or less reset your working environment."

    doLast {
        if (OperatingSystem.current().isWindows()) {

        }

        if (OperatingSystem.current().isLinux()) {
            exec {
                workingDir './'
                commandLine './scripts/kill.sh'
            }
        }
    }
}
