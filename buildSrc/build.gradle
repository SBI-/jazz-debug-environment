import com.github.sherter.googlejavaformatgradleplugin.GoogleJavaFormat

plugins {
    id 'java-gradle-plugin'
    id 'org.openrepose.gradle.plugins.jaxb' version '2.5.0'
    id 'com.github.sherter.google-java-format' version '0.8'
}

dependencies {
    api group: 'org.apache.commons', name: 'commons-compress', version: '1.20'
    // this needs to be in here because of a known limitation:
    // https://stackoverflow.com/questions/28229095/apache-commons-compress-using-7zip
    api group: 'org.tukaani', name: 'xz', version: '1.8'
    api group: 'com.google.guava', name: 'guava', version: '28.2-jre'
    api "org.jtwig:jtwig-core:5.87.0.RELEASE"
    // jaxb for xsd -> class generation
    jaxb 'org.glassfish.jaxb:jaxb-xjc:2.3.2'
//    jaxb 'org.glassfish.jaxb:jaxb-runtime:2.2.11'
    jaxb "org.jvnet.jaxb2_commons:jaxb2-basics:1.11.1"
    jaxb 'org.jvnet.jaxb2_commons:jaxb2-basics-ant:1.11.1'
    jaxb 'org.jvnet.jaxb2_commons:jaxb2-basics-annotate:1.0.4'
    // required as a dependency for avoiding logging erros from jaxb
    jaxb 'org.slf4j:slf4j-log4j12:1.7.25'
    // eclipse plugin
    api 'com.diffplug.gradle:goomph:3.17.4'
}

repositories {
    jcenter()
    mavenCentral()
}

sourceSets {
    main {
        java {
            exclude 'jde'
            java.srcDir 'build/generated-sources/xjc'
        }
    }
}

googleJavaFormat {
    group = "jde development"
    description = "Source folders to include in formatting."
    source 'buildSrc'
}

task format(type: GoogleJavaFormat) {
    group = "jde development"
    description = "Format jde source code according to the google code style."
}

compileJava {
    dependsOn format
}

tasks.withType(JavaCompile) {
    //options.compilerArgs += ["--add-modules", "java.xml.bind,java.activation"]
    options.compilerArgs << "-Xlint:unchecked"
    options.deprecation = true
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
}

jaxb {
    xsdDir = "resources/"
    xjc {
        generateEpisodeFiles = false
        taskClassname = "org.jvnet.jaxb2_commons.xjc.XJC2Task"
        generatePackage = "org.jazzcommunity.development.gen"
        args = ["-Xinheritance", "-Xannotate"]
    }
}

compileJava {
//    doFirst {
//        options.compilerArgs += ["--add-modules", "java.xml.bind,java.activation"]
//    }
    dependsOn clean
    dependsOn xjc
    tasks.findByName('xjc').mustRunAfter('clean')
}
